program 
function 
denitions 


identier 
list 


variable 
denitions 
type 
function 
head 


arguments 
parameter 
list 
parameters 


block 
statements 


statement 


input 
statement 


Target 
Language 
Syntax 
CS 
4300 
– 
Spring 
2017 


::= 
variable 
denitions 
function 
denitions 


::= 
function 
head 
block 
::= 
function 
denitions 
function 
head 
block 


::= 
ID 
::= 
ID 
[ 
INT 
LITERAL 
] 
::= 
identier 
list 
, 
ID 
::= 
identier 
list 
, 
ID 
[ 
INT 
LITERAL 
] 


::= 
variable 
denitions 
type 
identier 
list 
; 


::= 
INT 
::= 
FLOAT 


::= 
type 
ID 
arguments 


::= 
( 
parameter 
list 
) 


::= 
parameters 


::= 
type 
ID 
::= 
type 
ID 
[ 
] 
::= 
parameters 
, 
type 
ID 
::= 
parameters 
, 
type 
ID 
[ 
] 


::= 
{ 
variable 
denitions 
statements 
} 


::= 
statements 
statement 


::= 
expression 
; 
::= 
compound 
statement 
::= 
RETURN 
expression 
; 
::= 
IF 
( 
bool 
expression 
) 
statement 
ELSE 
statement 
::= 
WHILE 
( 
bool 
expression 
) 
statement 
::= 
input 
statement 
; 
::= 
output 
statement 
; 


::= 
CIN 
::= 
input 
statement 
STREAMIN 
variable 


1 



output 
statement 
::= 
COUT 
::= 
output 
statement 
STREAMOUT 
expression 
::= 
output 
statement 
STREAMOUT 
STR 
LITERAL 
::= 
output 
statement 
STREAMOUT 
ENDL 


compound 
statement 
::= 
{ 
statements 
} 


variable 
::= 
ID 
::= 
ID 
[ 
expression 
] 
expression 
list 
::= 
. 
::= 
expressions 
expressions 
::= 
expression 
::= 
expressions 
, 
expression 
expression 
::= 
variable 
ASSIGNOP 
expression 
::= 
variable 
INCOP 
expression 
::= 
simple 
expression 
simple 
expression 
::= 
term 
::= 
ADDOP 
term 
::= 
simple 
expression 
ADDOP 
term 
term 
::= 
factor 
::= 
term 
MULOP 
factor 
factor 
::= 
ID 
::= 
ID 
( 
expression 
list 
) 
::= 
literal 
::= 
( 
expression 
) 
::= 
ID 
[ 
expression 
] 
literal 
::= 
INT 
LITERAL 
::= 
FLT 
LITERAL 
bool 
expression 
::= 
bool 
term 
::= 
bool 
expression 
OR 
bool 
term 
bool 
term 
::= 
bool 
factor 
::= 
bool 
term 
AND 
bool 
factor 
bool 
factor 
::= 
NOT 
bool 
factor 
::= 
( 
bool 
expression 
) 
::= 
simple 
expression 
RELOP 
simple 
expression 
2 



Where: 


Entries 
in 
boldface 
are 
tokens 


ASSIGNOP 
stands 
for 
the 
lexeme 
= 


MULOP 
is 
one 
of 
* 
/ 
% 


ADDOP 
is 
one 
of 
+ 



INCOP 
is 
one 
of 
+= 
-= 


RELOP 
is 
one 
of 
<><= 
>= 
== 
!= 


NOT 
stands 
for 
the 
lexeme 
! 


OR 
stands 
for 
the 
lexeme 
jj

AND 
stands 
for 
the 
lexeme 
&& 


FLT 
LITERAL 
is 
a 
oat 
constant 
without 
a 
sign 


(at 
least 
1 
digit 
before 
and 
after 
decimal 
pt.; 
possible 
exponent) 


INT 
LITERAL 
is 
an 
integer 
constant 
without 
a 
sign 


STR 
LITERAL 
is 
a 
string 
enclosed 
in 
quotes 
("), 
not 
longer 
than 
1 
line 


STREAMIN 
is 
>> 


STREAMOUT 
is 
<< 


ID 
follows 
the 
usual 
rules 
for 
C++ 
identiers, 
and 
may 
be 
any 
length 


CIN, 
COUT, 
ELSE, 
ENDL, 
FLOAT, 
IF, 
INT, 
RETURN, 
and 
WHILE 


are 
the 
keywords 
with 
those 
spellings 
()[] 
f} 
; 
and 
, 
are 
single-character 
tokens 
representing 
themselves 


Additional 
lexical 
conventions: 


Comments 
may 
be 
entered 
using 
either 
/* 
... 
*/ 
or 
//, 
as 
in 
real 
C++ 


Any 
line 
beginning 
with 
# 
(like, 
for 
instance, 
#include 
<iostream> 
) 


is 
also 
considered 
a 
comment 


3 



